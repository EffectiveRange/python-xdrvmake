VERSION = $(shell grep Version: staging/DEBIAN/control | cut -d' ' -f2)
# TODO: build module for all kernel versions
KVER ?= 6.1.21+
TARGET ?=  $(error TARGET not specified for deploy )
DISTRO = $(shell grep VERSION_CODENAME= /home/crossbuilder/target/target | cut -d'=' -f2)
ARCH = $(shell grep TARGET_ARCH= /home/crossbuilder/target/target | cut -d'=' -f2)
KBASEVER = $(shell echo "$(KVER)" | cut -d'-' -f1)

all: {{ project }}_$(VERSION)-1_$(ARCH).deb
	@true

{{ project }}_$(VERSION)-1_$(ARCH).deb : driver {{ project }}.dtbo staging/DEBIAN/*
	mkdir -p build
	mkdir -p staging//lib/modules/$(KVER)
	if [ "$(DISTRO)" = "bullseye" ]; then \
		mkdir -p staging//boot/overlays/; \
		cp {{ project }}.dtbo staging/boot/overlays/ ;\
	else \
		mkdir -p staging/boot/firmware/overlays/; \
		cp {{ project }}.dtbo staging//boot/firmware/overlays/; \
	fi
	dpkg-deb --root-owner-group --build staging {{ project }}_$(VERSION)-1_$(ARCH).deb

staging/lib/modules/$(KVER)/{{ modulename }}.ko: {{projectroot}}/{{ sourcedir }}/*.c {{projectroot}}/{{ sourcedir }}/*.h {{projectroot}}/{{ sourcedir }}/Makefile
	mkdir -p build
	mkdir -p staging/lib/modules/$(KVER)/
	rsync --delete -r  {{ projectroot }}/{{ sourcedir }}/ /tmp/drv-{{ project }}
	schroot -c buildroot -u root -d /tmp/drv-{{ project }} -- make KVER=$(KVER) {{ kbuild_flags }}
	cp /tmp/drv-{{ project }}/{{ modulename }}.ko staging/lib/modules/$(KVER)/{{ modulename }}.ko

driver: staging/lib/modules/$(KVER)/{{ modulename }}.ko
	@true

clean:
	rm -rf staging/boot/ staging/lib/ 

{{ project }}.dts.pre: {{projectroot}}/{{ project }}.dts
	if [ "$(DISTRO)" = "bullseye" ]; then \
		cpp -nostdinc -undef -x assembler-with-cpp -I/var/chroot/buildroot/usr/src/linux-headers-$(KVER)/include -o {{ project }}.dts.pre {{projectroot}}/{{ project }}.dts ;\
	else \
		KHDR_DIR=`ls -d1 /var/chroot/buildroot/usr/src/*$(KBASEVER)*-common-rpi`; \
		cpp -nostdinc -undef -x assembler-with-cpp -I$${KHDR_DIR}/include -I/var/chroot/buildroot/usr/src/linux-headers-$(KVER)/include -o {{ project }}.dts.pre {{projectroot}}/{{ project }}.dts ;\
	fi
{{ project }}.dtbo: {{ project }}.dts.pre
	dtc  -I dts -O dtb -o {{ project }}.dtbo {{ project }}.dts.pre

deploy: all
	rsync -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" -avhz --progress {{ project }}_$(VERSION)-1_$(ARCH).deb $(TARGET):/tmp/
	ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $(TARGET) -- sudo dpkg --force-all -i  /tmp/{{ project }}_$(VERSION)-1_$(ARCH).deb
	ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $(TARGET) -- sudo sed -ri '/^\s*dtoverlay={{ project }}/d' /boot/config.txt
	ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $(TARGET) -- "echo 'dtoverlay={{ project }}:battery_diag=true' | sudo tee -a /boot/config.txt"

quickdeploy: driver
	scp {{ project }}/lib/modules/$(KVER)/{{ modulename }}.ko $(TARGET):/tmp/
	ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $(TARGET) -- "sudo rmmod {{ modulename }} || true"
	ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $(TARGET) -- sudo cp /tmp/{{ modulename }}.ko /lib/modules/$(KVER)/
	ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $(TARGET) -- "sudo modprobe {{ modulename }} || true"
	

.PHONY: clean all deploy quickdeploy driver
